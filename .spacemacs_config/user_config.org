#+TITLE: SPACEMACS Literate Configuration
#+AUTHOR: Richard Lynch
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:
** Key Bindings
*** Org
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode ";" 'org-set-tags-command)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-to)
  (spacemacs/set-leader-keys "oc" 'org-capture)
#+END_SRC
*** Windows
Split Windows
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "w\\" 'split-window-right-and-focus)
  (spacemacs/set-leader-keys "w-" 'split-window-below-and-focus)
#+END_SRC
Navigate Windows
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'super)
#+END_SRC
*** Workspaces
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "\~" 'eyebrowse-switch-to-window-config)
  (spacemacs/set-leader-keys "`" 'eyebrowse-last-window-config)
#+END_SRC
** Evil Ex commands
Function to save then kill a buffer (instead of saving and killing the window)
#+BEGIN_SRC emacs-lisp
  (defun my/ex-save-kill-buffer-and-close ()
    ;; https://www.reddit.com/r/spacemacs/comments/6p3w0l/making_q_not_kill_emacs/
    (interactive)
    (save-buffer)
    (kill-this-buffer)
    )
#+END_SRC
Map w and q to more sane commands (kill buffer not window)
#+BEGIN_SRC emacs-lisp
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" 'my/ex-save-kill-buffer-and-close)
#+END_SRC
Typos
#+BEGIN_SRC emacs-lisp
  (evil-ex-define-cmd "Q" "q")
  (evil-ex-define-cmd "Q!" "q!")
  (evil-ex-define-cmd "W" "w")
  (evil-ex-define-cmd "W!" "w!")
  (evil-ex-define-cmd "WQ" "wq")
  (evil-ex-define-cmd "Wq" "wq")
  (evil-ex-define-cmd "wQ" "wq")
  (evil-ex-define-cmd "WQ!" "wq!")
  (evil-ex-define-cmd "Wq!" "wq!")
  (evil-ex-define-cmd "wQ!" "wq!")
#+END_SRC
** Packages
*** ORG
Add org-protocol for capturing in Google Chrome
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC
Add Emoji
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'spacemacs/delay-emoji-cheat-sheet-hook)
  (add-hook 'org-mode-hook 'company-emoji-init)
#+END_SRC
Re-Indent all text in org files on save
#+BEGIN_SRC emacs-lisp
  (defun org-mode-indent-hook()
    "Auto Indent Org-Mode"
    (when (eq major-mode 'org-mode)
      (org-indent-indent-buffer)))
  (add-hook 'after-save-hook 'org-mode-indent-hook)
#+END_SRC
Auto create new items in list
#+BEGIN_SRC emacs-lisp
  (require 'org-autolist)
  (add-hook 'org-mode-hook 'org-autolist-mode)
#+END_SRC
*** Magit
#+BEGIN_SRC 
  (use-package magithub
    :after magit
    :ensure t
    :config (magithub-feature-autoinject t))
#+END_SRC
*** Powerline
  Date-time in powerline from [[https://emacs.stackexchange.com/questions/16735/how-to-add-date-and-time-into-spacemacs-mode-line][StackExchange]]
#+BEGIN_SRC emacs-lisp
  (spaceline-define-segment datetime
    (shell-command-to-string "echo -n $(date '+%a %d %b %I:%M%p')"))
  (spaceline-spacemacs-theme 'datetime)
#+END_SRC
Version Control
#+BEGIN_SRC emacs-lisp
  (setq spaceline-version-control-p t)
#+END_SRC
Hide minor mode power-line
#+BEGIN_SRC emacs-lisp
  (setq-default spaceline-minor-modes-p nil)
#+END_SRC
*** Other
Sublimity: Sublime like features in emacs
#+BEGIN_SRC emacs-lisp
  (require 'sublimity)
#+END_SRC
[[https://github.com/dieggsy/eterm-256color][eterm-256color]]: 256 colors in emacs term
#+BEGIN_SRC emacs-lisp
  (require 'eterm-256color)
  (add-hook 'term-mode-hook #'eterm-256color-mode)
#+END_SRC
** General
Always wrap lines visually
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
Move cursor within visual lines, not true lines
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC
Enable mouse support
#+BEGIN_SRC emacs-lisp
  (unless window-system
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
#+END_SRC
Fix issue of raising emacs frame from: https://korewanetadesu.com/emacs-on-os-x.html
#+BEGIN_SRC emacs-lisp
  (when (featurep 'ns)
    (defun ns-raise-emacs ()
      "Raise Emacs."
      (ns-do-applescript "tell application \"Emacs\" to activate"))
    (defun ns-raise-emacs-with-frame (frame)
      "Raise Emacs and select the provided frame."
      (with-selected-frame frame
        (when (display-graphic-p)
          (ns-raise-emacs))))
    (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)
    (when (display-graphic-p)
      (ns-raise-emacs)))
#+END_SRC
